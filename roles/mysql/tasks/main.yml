- name: MySQL - Install MySQL packages
  ansible.builtin.package:
    name:
      - mariadb-client
      - mariadb-common
      - mariadb-server
      - python3-mysqldb
    state: present
  register: install_mysql
  notify: upgrade schemas

- name: MySQL - Configuring service
  ansible.builtin.systemd:
    name: mariadb
    state: started
    enabled: true
    daemon_reload: true

- name: MySQL - Copy global MySQL configuration
  ansible.builtin.template:
    src: "server.cnf.j2"
    dest: "/etc/mysql/server.cnf"
    owner: root
    group: root
    mode: 0644
  notify: restart mariadb

- name: MySQL - Ensure additional options file include dir exists
  ansible.builtin.file:
    path: "{{ mysql_extra_conf_include_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: MySQL - Ensure additional options file and template paths exists
  ansible.builtin.file:
    path: "{{ mysql_extra_conf_include_dir }}/{{ item.path }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_filetree:
    - "{{ mysql_extra_conf_playbook_path }}/"
    - "{{ mysql_extra_conf_template_playbook_path }}/"
  when: item.state == "directory"

- name: MySQL - Copy extra option files (provided by playbooks)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ mysql_extra_conf_include_dir }}/{{ item.path }}"
    owner: root
    group: root
    mode: 0644
  with_filetree:
    - "{{ mysql_extra_conf_playbook_path }}/"
  when: item.state == "file"
  notify: restart mysql

- name: MySQL - Copy extra option files templates (provided by playbooks)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ mysql_extra_conf_include_dir }}/{{ item.path | splitext | first }}" # This is to remove .j2 extension
    owner: root
    group: root
    mode: 0644
  with_filetree:
    - "{{ mysql_extra_conf_template_playbook_path }}/"
  when: item.state == "file"
  notify: restart mysql

- name: MySQL - Ensure datadir exists
  ansible.builtin.file:
    path: "{{ mysql_datadir }}"
    state: directory
    owner: "{{ mysql_user }}"
    group: "{{ mysql_group }}"
    mode: 0750

- name: MySQL - Check if datadir is initialized
  ansible.builtin.command: ls "{{ mysql_datadir }}/mysql"
  register: ls_datadir
  ignore_errors: true
  changed_when: false

- name: MySQL - Trying to initialize datadir
  ansible.builtin.command: /usr/sbin/mysqld --initialize-insecure --user={{ mysql_user }}
  register: result
  ignore_errors: true
  changed_when: result.rc == 0
  when: ls_datadir.stdout | length == 0

- name: MySQL - Ensure MySQL is started and enabled on boot
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true
    daemon_reload: true

- name: MySQL - Flush handlers to restart MySQL after previous initialization
  ansible.builtin.meta: flush_handlers

- name: MySQL - Set root password
  mysql_user:
    name: "{{ mysql_root_user }}"
    password: "{{ mysql_root_password }}"
    login_user: root
    login_host: localhost
  when: "installed_mysql.stdout != 'Status: install ok installed'"

- name: MySQL - Ensure MySQL users are present
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
    name: "{{ item.name }}"
    host: "{{ item.host | default('localhost') }}"
    password: "{{ item.password }}"
    priv: "{{  item.priv | default(['*.*:USAGE']) | join('/') }}"
    append_privs: true
  with_items: "{{ mysql_users }}"
  no_log: true

- name: Install Required pip modules
  ansible.builtin.pip:
    name:
      - PyMySQL
    state: present
    executable: pip3

- name: Ensure mysql service is running
  ansible.builtin.systemd:
    name: mysqld
    state: restarted
    enabled: true

- name: Ensure root user can only login from localhost
  mysql_user:
    login_password: "{{ mysql_root_password }}"
    check_implicit_admin: true
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
    state: present
  with_items:
    - localhost
    - 127.0.0.1
    - ::1

- name: Add .my-cnf to user home
  ansible.builtin.template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600

- name: Reload privilege tables
  ansible.builtin.command: |
    mysql -p{{ mysql_root_password }} -ne "{{ item }}"
  with_items:
    - FLUSH PRIVILEGES
  changed_when: false

- name: Remove anonymous users
  ansible.builtin.command: |
    mysql -p{{ mysql_root_password }} -ne "{{ item }}"
  with_items:
    - DELETE FROM mysql.user WHERE User=''
  changed_when: false

- name: Disallow root login remotely
  ansible.builtin.command: |
    mysql -p{{ mysql_root_password }} -ne "{{ item }}"
  with_items:
    - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Remove test database and access to it
  ansible.builtin.command: |
    mysql -p{{ mysql_root_password }} -ne "{{ item }}"
  with_items:
    - DROP DATABASE IF EXISTS test
    - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
  changed_when: false

- name: Reload privilege tables
  ansible.builtin.command: |
    mysql -p{{ mysql_root_password }} -ne "{{ item }}"
  with_items:
    - FLUSH PRIVILEGES
  changed_when: false

- name: Delete .my.conf
  ansible.builtin.file:
    path: /root/.my.cnf
    state: absent
